1)	Installing GIT package
		Sudo yum install git

2)	Configuration Git
		git config -l
		git config - - global user.name “palani”
		git config - - global user.email “palani.gmail.com”
		git config - - system core.editor vim

3)	you can edit the files directly
	
	/etc/gitconfig which corresponds to - -  system
	~/. Gitconfig or ~/.config/git/config which corresponds to - - global
	. git/config in a repository which corresponds to - - local

4)	To create a repository there are two ways
		First way -> git init <repo-directory>
			Eg : git init folder1
		Second way -> Create a directory, go inside the directory, type the command git init
			Eg: mkdir folder1, cd folder1, git init
5)	Find status
		git status

6)	To track files
		git add <file_name>
		git add . ( To add many files )

7)	To list files which we are tracking 
		git ls-files
8)	To untrack files
		git restore - - staged <file_name>
		git restore –staged <file_name>    ( this is to unstage )

9)	Checkout ( To discard changes in working directory )
	git checkout   - - <file-name>

10)	To rename a file
	
	git mv file1.txt file2.txt
	git add -A
	git add -u ( when you don’t want to add some files )

11)	To delete files
	git rm <file-name>
12)	To commit a file

	git commit -m “Adding start text file “
    git commit -am “Adding and commiting at same time” ( Adding and committing at the same time you have to use the option -am )

13)	To push changes
	git push origin master

14)	  Pull files
	git pull origin master

15)	To rebase a master branch below are the steps
	
	git checkout branch2 (this will make the pointer to be placed in branch2)
	git rebase master ( you are rebasing master that means for example some developer made some commit changes to the master and you want to include those changes to your branch)
	The branch branch2 when you created from master does not include those changes

16)	To ignore the file

	Create a file called .gitignore
	Eg : vim .gitignore, inside the file, *.jpg, to ignore a folder temp

 



17)	Clone a repository
	
	git clone repo1 repo2

18)	logging

	git log - - oneline
	git log - - <filename>
	git log - - oneline <filename>
	git log - - abbrev-commit
	git log - - oneline - - graph - - decorate

19)	branching

	git branch <branch name> ( to create new branch ) 

20)	Tagging

	git tag <tag_name>
	git tag -a <tag_name>
	git tag - - list
	git tag -a <tag_name> <particular_commit_id>
	git tag -a <tag_name> -f <correct_commit_id> ( updating the tag to correct commit id )
	git push origin <tag_name>
	git push origin master –tags ( to push all the tags at the same time ) 
	git push origin :<tag-name> ( to delete a tag in the git hub)
21)	
	git checkout <branch name> ( to go inside branch use below command ) ( the pointer will be in this branch now )
	git branch -a ( to list all branches ) 
	git branch -m <old_branch_name> <new_branch_name> ( rename a branch )
	git branch -d <branch-name> ( to delete a branch )
	git checkout -b branch1 ( it will create a branch name called branch1 and checkout to this branch1 that means the pointer will be in the branch1 branch )


22)	To delete a branch

	Git branch -d <branch name>

23)	Merging

	Go inside master branch and put the command 
	Git merge <branch>

24)	Commands
	
	Git clone https://github.com/palseums/python.git

25)	Git alias

	git log - -  all - - graph - - decorate - - oneline ( as it is a long command )
	Once you set the below command
	Git config - - global alias.hist “log - -  all - - graph - - decorate - - oneline” 
	You can shortly type this command as git hist
	Alias are stored in the below location
	Your user directory ~/.gitconfig


26)	Specific branch

	git clone - - branch <branch_name> - -single-branch https_URL

27)	Change password
	
	git config --global --unset user.password
		git push origin master




